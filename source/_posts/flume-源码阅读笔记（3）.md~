title: flume源码阅读笔记 （3）
date: 2015-07-10 00:13:12
tags: flume 源码
---
前面介绍了几个关键组件以及相互的关系，这次我们来看看flume里对于事务的封装与处理。
## Transaction
### BasicTransactionSemantics
* state : State //NEW, OPEN, COMPLETED, CLOSED
* initialThreadId : long //记录创建它的ThreadId
* begin()
* commit()
* rollback()
* close()
* put(Event)
* take()
An implementation of basic Transaction semantics designed to work in concert with **BasicChannelSemantics** to simplify creation of robust Channel implementations. This class ensures that each transaction implementation method is called **only while the transaction is in the correct state for that method, and only by the thread that created the transaction**. Nested calls to begin() and close() are supported as long as they are balanced. 

是基本Transaction的实现，与**BasicChannelSemantics**配合。这个类保证transaction实现方法**只在当前transaction适当的状态下触发，而且只能被创建当前transaction的线程触发**。

Subclasses need only implement **doPut, doTake, doCommit**, and **doRollback**, and the developer can rest assured that those methods are called only after transaction state preconditions have been properly met. **doBegin** and **doClose** may also be implemented if there is work to be done at those points. 

子类只需要实现**doPut, doTake, doCommit**以及**doRollback**方法，同时开发人员还需要保证只有在transaction的state被正确的修改后，才能触发这些方法。如果有必要的话，也可以实现**doBegin**和**doClose**方法。

All InterruptedException exceptions thrown from the implementations of the doXXX methods are automatically wrapped to become ChannelExceptions, but only after restoring the interrupted status of the thread so that any subsequent blocking method calls will themselves throw InterruptedException rather than blocking. The exception to this rule is doTake, which simply returns null instead of wrapping and propagating the InterruptedException, though it still first restores the interrupted status of the thread. 
当doXXX方法发生异常的时候，首先把当前线程的状态修改为interrupted，然后把所有的InterruptedException转化为ChannelException抛出，这样后面的方法就不会阻塞住。doTake就遵循这样的规则，首先把线程状态改为interrupted，然后不包装以及传递InterruptedException，而是返回null。

---
## Channel
### BasicChannelSemantics
* currentTransaction : **ThreadLocal**&lt;BasicTransactionSemantics&gt;
* put(Event)
* take()
* getTransaction()

---
## 实现类MemoryTransaction在MemoryChannel里的使用

### MemoryTransaction
* takeList : LinkedBlockingDeque<Event> // 消费者的队列
* putList : LinkedBlockingDeque<Event>  // 生产者的队列
* putByteCounter : int
* takeByteCounter : int
* channelCounter : ChannelCounter

event放入channel
```java
@Override
    protected void doPut(Event event) throws InterruptedException {
      channelCounter.incrementEventPutAttemptCount();
      int eventByteSize = (int)Math.ceil(estimateEventSize(event)/byteCapacitySlotSize);
      if (!putList.offer(event)) {    // 放入生产者队列
        throw new ChannelException(
          "Put queue for MemoryTransaction of capacity " +
            putList.size() + " full, consider committing more frequently, " +
            "increasing capacity or increasing thread count");
      }
      putByteCounter += eventByteSize;
    }
```
消费channel里的event
```java
protected Event doTake() throws InterruptedException {
      channelCounter.incrementEventTakeAttemptCount();
      if(takeList.remainingCapacity() == 0) {
        throw new ChannelException("Take list for MemoryTransaction, capacity " +
            takeList.size() + " full, consider committing more frequently, " +
            "increasing capacity, or increasing thread count");
      }
      if(!queueStored.tryAcquire(keepAlive, TimeUnit.SECONDS)) {
        return null;
      }
      Event event;
      synchronized(queueLock) {
        event = queue.poll(); // 从channel中消费一条数据
      }
      Preconditions.checkNotNull(event, "Queue.poll returned NULL despite semaphore " +
          "signalling existence of entry");
      takeList.put(event);    // 放入Transaction的消费者队列

      int eventByteSize = (int)Math.ceil(estimateEventSize(event)/byteCapacitySlotSize);
      takeByteCounter += eventByteSize;

      return event;
    }

```

提交事务：
```java
@Override
    protected void doCommit() throws InterruptedException {
      ...
        if(!queueRemaining.tryAcquire(-remainingChange, keepAlive, TimeUnit.SECONDS)) {
          bytesRemaining.release(putByteCounter);
          throw new ChannelFullException("Space for commit to queue couldn't be acquired." +
              " Sinks are likely not keeping up with sources, or the buffer size is too tight");
        }
      }
      int puts = putList.size();
      int takes = takeList.size();
      synchronized(queueLock) {
        if(puts > 0 ) {
          while(!putList.isEmpty()) {
           //这里的queue是MemoryChannel的Event队列，也就是将这段时间put的event放进channel的意思了
            if(!queue.offer(putList.removeFirst())) {
              throw new RuntimeException("Queue add failed, this shouldn't be able to happen");
            }
          }
        }
        putList.clear();
        takeList.clear();
      }
      bytesRemaining.release(takeByteCounter);
      takeByteCounter = 0;
      putByteCounter = 0;

      queueStored.release(puts);
      if(remainingChange > 0) {
        queueRemaining.release(remainingChange);
      }
      if (puts > 0) {
        channelCounter.addToEventPutSuccessCount(puts);
      }
      if (takes > 0) {
        channelCounter.addToEventTakeSuccessCount(takes);
      }

      channelCounter.setChannelSize(queue.size());
    }
```
回滚代码, 可想而知，肯定是回复channel之前的状态，将刚刚消费出来的东西塞回去，塞进去的东西拿出来：
```java
protected void doRollback() {
      int takes = takeList.size();
      synchronized(queueLock) {
        // 检查还能不能塞回去了
        Preconditions.checkState(queue.remainingCapacity() >= takeList.size(), "Not enough space in memory channel " +
            "queue to rollback takes. This should never happen, please report");
        while(!takeList.isEmpty()) {
          queue.addFirst(takeList.removeLast()); //消费的event塞回去
        }
        putList.clear();//这是要塞进去的event清空
      }
      bytesRemaining.release(putByteCounter);
      putByteCounter = 0;
      takeByteCounter = 0;

      queueStored.release(takes);
      channelCounter.setChannelSize(queue.size());
    }
```
这里比较容易看到的是，**如果塞了一半报错，会出现一些rollback差错**，因为已经放进去的，并没有拿出来。如果需要实现的话，其实应该在放的时候起一个**计数器**，然后rollback的时候按照数量先往外拿，然后再把前面拿出来的放回去~~~~嘿嘿,是不是可以提交到社区 ^ _ ^


